@{
    ViewData["Title"] = "Главная страница";

}

@model CreateEventViewModel

@using System.Security.Claims
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@{ string userId = User?.FindFirstValue(ClaimTypes.NameIdentifier); }
@* RequestVerificationToken *@
<input type="hidden" id="RequestVerificationToken"
       name="RequestVerificationToken" value="@GetAntiXsrfRequestToken()">

@* MAIN MARKUP *@
<div class="d-flex flex-column container-fields">
    @* datepicker *@
    <div id="datepicker" data-date="@DateTime.Now.ToLocalTime().ToString()"></div>
    @* for datepicker *@
    <input type="hidden" id="my_hidden_input">
    @* btns *@
    <div class="d-flex justify-content-center">
        @{
            if (User.IsInRole("admin"))
            {
                <a class="btn btn-outline-info mr-1" href="#" data-toggle="modal" data-target="#exampleModalLong">
                    <i class="fas fa-calendar-plus" data-toggle="tooltip"
                       data-placement="top" title="Создать событие">
                    </i>
                </a>
            }
            else
            {
                <span class="d-inline-block mr-1 disabledSpan" data-toggle="popover" data-content="Нет прав доступа">
                    <a class="btn btn-outline-info disabled" href="#" style="pointer-events: none;">
                        <i class="fas fa-calendar-plus"></i>
                    </a>
                </span>

            }
        }
        <a asp-action="AllEvents" asp-controller="Event" id="allEventsBtn" class="btn btn-outline-info ml-1">
            <i class="fas fa-calendar-alt" data-toggle="tooltip" data-placement="top"
               title="Посмотреть все события"></i>
        </a>
    </div>
</div>
 @* Add event Modal *@
<div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">
                    <span class="badge badge-secondary">Создать событие</span>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createEventForm">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <input type="hidden" asp-for="DateOfCreation" value="@DateTimeOffset.Now" />
                    @* INPUT NAME *@
                    <div class="input-group input-group-sm mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Название</span>
                        </div>
                        <input asp-for="Name" class="form-control" aria-label="Small" required
                               aria-describedby="inputGroup-sizing-sm" list="name-event">
                        <datalist id="name-event">
                            <option value="Amazing Event"></option>
                        </datalist>
                    </div>
                    @* INPUT DATE *@
                    <div class="input-group input-group-sm mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Дата</span>
                        </div>
                        <input type="datetime-local" asp-for="EventDate" aria-label="Small" 
                               value="" class="form-control"
                                       required aria-describedby="inputGroup-sizing-sm">
                    </div>
                    @* INPUT NUMBER *@
                    <div class="input-group input-group-sm mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Количество участников</span>
                        </div>
                        <input asp-for="AmountOfParticipants" required min="0" class="form-control" aria-label="Small"
                               aria-describedby="inputGroup-sizing-sm" list="numbers-participants">
                        <datalist id="numbers-participants">
                            <option value="0"></option>
                            <option value="1"></option>
                            <option value="100"></option>
                            <option value="1000"></option>
                            <option value="10000"></option>
                        </datalist>
                    </div>
                    @* BUTTON ADD FIELD *@
                    <button id="addField" type="button" class="btn btn-outline-info btn-sm mb-3">
                        <i class="fas fa-plus"> Добавить Поле</i>
                    </button>

                    <div class="modal-footer add-event-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                        @if (User.IsInRole("admin"))
                        {
                            <button id="submitBtn" type="submit" class="btn btn-outline-info">
                                Создать
                            </button>
                        }
                        else
                        {
                            <span class="d-inline-block mr-1 disabledSpan" data-toggle="popover" data-content="Нет прав доступа">
                                <a class="btn btn-outline-info disabled" href="#" style="pointer-events: none;">
                                    Создать
                                </a>
                            </span>
                        }

                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- js -->
    @await Html.PartialAsync("AlertPartial")
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', () => {

            const submitBtn = document.getElementById('submitBtn');
            const addBtn = document.getElementById('addField');
            const modalFooter = document.getElementsByClassName('add-event-footer')[0];
            const $eventForm = $('#createEventForm');

            // add event jquery
            $('#datepicker').datepicker()
                .on('changeDate', function (e) {                    
                    setDateForEventDate();
                    $('#exampleModalLong').modal('show');  
                });

            // set date for the EventDate input
            function setDateForEventDate(){
                const date = new Date($('#datepicker').datepicker('getDate'));
                let d = (date.getFullYear() + '-' + addZero(date.getMonth() + 1) +
                                        '-' + addZero(date.getDate()) + 'T00:00');
                document.getElementById('EventDate').value = d;
            }

            // submit
            if (submitBtn != null) {
                 submitBtn.addEventListener('click', (event) => {
                    event.preventDefault();

                    if ($eventForm.valid()) {
                        submitBtn.disabled = true;
                        setIdByAscending();
                        const eventData = new FormData($eventForm[0]);
                        const token = document.getElementById('RequestVerificationToken').value;
                        const url = '@Url.Action("CreateEvent", "Event")';

                        sendPromiseEvent(url, eventData, token)
                            .then((res) => {
                                console.info(res);
                                closeModal(false);
                                $eventForm.trigger("reset");
                            })
                            .catch((error) => {
                                console.error(error);
                                closeModal(true);
                            });
                    }
                });
            }
           
            // send promise xhr request
            function sendPromiseEvent(url, data, token) {
                return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', url);
                    xhr.setRequestHeader('RequestVerificationToken', token);
                    xhr.onload = () => {
                        if (xhr.status == 200) {
                            resolve(xhr.response);
                        } else {
                            reject(xhr.response);
                        }
                    };
                    xhr.onerror = () => {
                        reject(xhr.response);
                    };
                    xhr.send(data);
                });
            }

            // close modal window
            function closeModal(isError) {
                if (submitBtn != null) {
                    submitBtn.disabled = false;
                }
                
                if (isError) {
                    $('#exampleModalLong').modal('hide');
                    $('#errorModal').modal('show');
                } else {
                    $('#exampleModalLong').modal('hide');
                    $('#successModal').modal('show');
                }
            }

            // set new field via 'Closures'
            const setField = createField();

            // add field
            addBtn.addEventListener('click', () => {
                modalFooter.insertAdjacentElement('beforebegin', setField());
            });

            // delete field
            document.addEventListener('click', (e) => {
                if (!e.target.hasAttribute('data-clear-name')) {
                    return;
                }

                let name = e.target.getAttribute('data-clear-name');
                deleteFieldViaAttribute(name);
            });

            // create new field
            function createField() {
                var fieldId = 0;
                return function () {
                    fieldId = fieldId + 1;
                    let fieldName = 'field' + fieldId;

                    let innerFields = '<div class="input-group-prepend">'
                        + '<span class="input-group-text" id="">Название/Значение</span></div>'
                        + '<input name="Content[0].Name" class="form-control i-field" required>'
                        + '<input name="Content[0].Value" class="form-control i-field" required>'
                        + '<div class="input-group-append">'
                        + '<a data-clear-name="'+ fieldName +'" class="btn btn-sm btn-outline-danger" href="#">&times;</a>'
                        + '</div>';

                    const field = document.createElement('div');
                    field.setAttribute('id', fieldName);
                    field.classList.add('input-group', 'input-group-sm', 'mb-3');
                    field.innerHTML = innerFields;
                    return field;
                }
            }

            // set id in by ascending
            function setIdByAscending() {
                let idn = 0;
                let idv = 0;

                $('input[name^="Content[0]"]').each(function (i, el) {
                    if (el.getAttribute('name') == 'Content[0].Name') {
                        let n = 'Content[' + idn + '].Name';
                        el.setAttribute('name', n);
                        idn++;
                    } else {
                        let v = 'Content[' + idv + '].Value';
                        el.setAttribute('name', v);
                        idv++;
                    }
                });
            }

            // delete field via attribute name
            function deleteFieldViaAttribute(name) {
                document.getElementById(name).remove();
            }

        });
    </script>
}
