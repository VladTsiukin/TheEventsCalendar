@model IEnumerable<EventPlanning.Models.EventsViewModels.AllEventViewModel>

@{
    ViewData["Title"] = "AllEventsView";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
public string GetXsrfToken()
{
    return Xsrf.GetAndStoreTokens(Context).RequestToken;
}
}

<input type="hidden" name="RequestVarificationToken"
       id="RequestVarificationToken" value="@GetXsrfToken()" />

<h2 class="shadow">
    <a href="#" id="sideCalendarBtn" data-toggle="tooltip" data-target="top" title="Выбрать дату">📅</a>
    Все события
</h2>

<table class="table table-dark">
    <thead>
        <tr>
            <th>
                Название
            </th>
            <th class="text-center">
                Дата
            </th>
            <th class="text-center">
                Подробнее
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @item.Name.ToString()
                </td>
                <td class="text-center">
                    @item.EventDate.ToString("dd-MM-yyyy Время: HH:mm",
                                                           CultureInfo.CreateSpecificCulture("ru-Ru"))
                </td>
                <td class="text-center">
                    <a class="btn btn-outline-light btn-sm" href="#" data-id="@item.Id">
                        <i data-id="@item.Id" class="fas fa-share"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>
@*  sidebar  *@
<div class="sideNav" id="sideCalendar">
    <div class="side-nav-content">
        <button type="button" id="closeSideBar" class="close m-2" aria-label="Close">
            <span aria-hidden="true" style="color: white;">&times;</span>
        </button>
        <div class="d-flex flex-column container-fields">
            @* datepicker *@
            <div id="datepicker" data-date="@DateTime.Now.ToLocalTime().ToString()"></div>
            @* for datepicker *@
            <input type="hidden" id="my_hidden_input">
        </div>
    </div>
</div>
@*  subscriberModal  *@
<div id="subscriberModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" aria-labelledby="subscriberModalTitle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="subscriberModalTitle">
                    <span class="badge badge-secondary">Подписаться на событие</span>
                </h5>
                <button type="button" class="close" aria-label="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="list-group">
                    <li class="list-group-item bg-main d-flex justify-content-between align-items-center">
                        Название
                        <span data-name="" class="badge badge-light badge-pill"></span>
                    </li>
                    <li class="list-group-item bg-main d-flex justify-content-between align-items-center">
                        Дата
                        <span data-date="" class="badge badge-light badge-pill"></span>
                    </li>
                    <li class="list-group-item bg-main d-flex justify-content-between align-items-center">
                        Количество участников
                        <span data-amount="" class="badge badge-light badge-pill"></span>
                    </li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal">Закрыть</button>
                <button type="submit" class="btn btn-sm btn-outline-main">Подписаться</button>
            </div>
        </div>
    </div>
</div>
@*  js  *@
@section Scripts {
    @await Html.PartialAsync("_AlertPartial")

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sideCalendar = document.getElementById('sideCalendar');
            const closeSideBar = document.getElementById('closeSideBar');
            const sideCalendarBtn = document.getElementById('sideCalendarBtn');
            const table = document.getElementsByTagName('table')[0];
            const subscriberModal = document.getElementById('subscriberModal');

            // add cammon event listener 'click' (for event data show)
            document.addEventListener('click', (event) => {

                if (!event.target.hasAttribute('data-id')) {
                    return;
                }

                const id = event.target.getAttribute('data-id');
                const nameEvent = subscriberModal.querySelector('span[data-name=""]');
                nameEvent.textContent = id;
                let idSend = encodeURIComponent(id);
                const url = '/Event/GetEventInfo?id=' + idSend;

                getPromiseData(url)
                    .then((res) => {

                        console.info(res);
                    })
                    .catch((e) => {
                        console.error(e);
                    });

                $('#subscriberModal').modal('show');

            });

            // open sidebar
            sideCalendarBtn.addEventListener('click', (event) => {
                event.preventDefault();
                sideCalendar.style.opacity = '1';
                sideCalendar.style.width = '22.5rem';
            });

            // close sidebar
            closeSideBar.addEventListener('click', (event) => {
                event.preventDefault();
                closeSidebar();
            });

            // choose date
            $('#datepicker').datepicker()
                .on('changeDate', function (e) {
                    closeSidebar();
                    const date = new Date($('#datepicker').datepicker('getDate'));
                    const data = 'date=' + encodeURIComponent(date.toDateString());
                    const url = '/Event/GetEventsByDate?' + data;

                    getPromiseData(url)
                        .then((res) => {
                            responseProcessing(res);
                        })
                        .catch((e) => {
                            $('#errorModal').modal('show');
                            console.log(e);
                        });
                });

            // response processing
            function responseProcessing(res) {
                const oldTbody = document.getElementsByTagName('tbody')[0];
                let data = JSON.parse(res);
                if (data.result == 'success') {

                    oldTbody.remove();
                    createNewTbody(data);

                    console.log(data);
                } else {
                    $('#notDataModal').modal('show');
                    console.log(res);
                }
            }

            // create new tbody
            function createNewTbody(data) {
                const newTbody = document.createElement('tbody');

                for (var i = 0; i < data.events.length; i++) {
                    newTbody.appendChild(createNewTr(data.events[i]));
                }

                table.appendChild(newTbody);
            }

            // create new tr
            function createNewTr(obj) {
                const tr = document.createElement('tr');
                const date = new Date(obj.eventDate);

                tr.innerHTML = '<td>' + obj.name + '</td>'
                    + '<td class="text-center">' + toDateRusString(date)
                    + ' Время: ' + date.toLocaleTimeString('ru-RU', { hour12: false }) + '</td>'
                    + '<td class="text-center">'
                    + '<a class="btn btn-outline-light btn-sm" href="#"'
                    + 'data-id="' + obj.id + '"><i data-id="' + obj.id + '" class="fas fa-share"></i>'
                    + '</a></td>';

                return tr;
            }

            // to date string
            function toDateRusString(d) {
                let day = addZero(d.getDate());
                let month = addZero(d.getMonth() + 1);
                let year = d.getFullYear();
                return (day + '-' + month + '-' + year).toString();
            }

            // get events by date from server
            function getPromiseData(url) {
                return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', url);
                    xhr.onload = () => {
                        if (xhr.status == 200) {
                            resolve(xhr.response);
                        } else {
                            reject(xhr.response);
                        }
                    };
                    xhr.onerror = () => {
                        reject(xhr.response);
                    };
                    xhr.send();
                });
            }

            // close side bar
            function closeSidebar() {
                sideCalendar.style.opacity = '0';
                sideCalendar.style.width = '0px';
            }
        });
    </script>

}
